// <auto-generated />
using System;
using It_Supporter.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace It_Supporter.Migrations.ThanhVien
{
    [DbContext(typeof(ThanhVienContext))]
    [Migration("20231116181538_RefreshTokens")]
    partial class RefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("It_Supporter.Models.Comments", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<string>("authorId")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("Current_Timestamp");

                    b.Property<DateTime?>("deleteat")
                        .HasColumnType("datetime");

                    b.Property<int?>("deleted")
                        .HasColumnType("int");

                    b.Property<int?>("parentId")
                        .HasColumnType("int");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updateat")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("It_Supporter.Models.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("It_Supporter.Models.Machines", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Technical")
                        .HasColumnType("char(10)");

                    b.Property<string>("TesterId")
                        .HasColumnType("char(10)");

                    b.Property<string>("customername")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("0");

                    b.Property<byte>("finished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("0");

                    b.Property<string>("machine_status")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("machinesgetat")
                        .HasColumnType("datetime");

                    b.Property<string>("note")
                        .HasColumnType("ntext");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<decimal>("serviceCharger")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0.00");

                    b.Property<string>("services")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("techId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("It_Supporter.Models.Notification", b =>
                {
                    b.Property<int>("NotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotiId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NotiBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotiHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isRead")
                        .HasColumnType("int");

                    b.HasKey("NotiId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("It_Supporter.Models.Posts", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<string>("authorId")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("content")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("Current_Timestamp");

                    b.Property<DateTime?>("deleteat")
                        .HasColumnType("datetime");

                    b.Property<byte?>("deleted")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("updateat")
                        .HasColumnType("datetime");

                    b.Property<string>("urlImage")
                        .HasColumnType("varchar(300)");

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("It_Supporter.Models.RefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("ExpriteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("It_Supporter.Models.TechEvents", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("techday")
                        .HasColumnType("date");

                    b.Property<DateTime>("timeend")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("timestart")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("TechEvents");
                });

            modelBuilder.Entity("It_Supporter.Models.ThanhVien", b =>
                {
                    b.Property<string>("MaTV")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chucvu")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Khoahoc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nganhhoc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("date");

                    b.Property<string>("SoDT")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TenTv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("deleted")
                        .HasColumnType("tinyint");

                    b.Property<int>("namvaohoc")
                        .HasColumnType("int");

                    b.Property<string>("urlImage")
                        .HasColumnType("varchar(300)");

                    b.HasKey("MaTV");

                    b.ToTable("THANHVIEN");
                });

            modelBuilder.Entity("It_Supporter.Models.UserAccount", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Username");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("It_Supporter.Models.Posts", b =>
                {
                    b.HasOne("It_Supporter.Models.ThanhVien", null)
                        .WithMany()
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
